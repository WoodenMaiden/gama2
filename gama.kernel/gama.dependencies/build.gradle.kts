/*
 * This file was generated by the Gradle 'init' task.
 */

//import org.standardout.gradle.plugin.platform.internal.config.BundleDependency


plugins {
    `java-library`
    `maven-publish`
}


group = "gama.kernel"
version = "2.0.0-SNAPSHOT"
description = "gama.dependencies"

val nonOGSIJars = listOf(
    "geotools/GeographicLib-Java-1.49.jar", "geotools/activation.jar", "geotools/bigint-0.7.1.jar", "geotools/commons-httpclient-3.1.jar",
    "geotools/disruptor-1.2.13.jar", "geotools/geodb-0.9.jar", "geotools/gt-arcgrid-25.0.jar", "geotools/gt-brewer-25.0.jar",
    "geotools/gt-coverage-25.0.jar", "geotools/gt-cql-25.0.jar", "geotools/gt-epsg-wkt-25.0.jar", "geotools/gt-geojson-25.0.jar",
    "geotools/gt-geotiff-25.0.jar", "geotools/gt-grid-25.0.jar", "geotools/gt-http-25.0.jar", "geotools/gt-jdbc-25.0.jar",
    "geotools/gt-jdbc-db2-25.0.jar", "geotools/gt-jdbc-main-25.0.jar", "geotools/gt-jdbc-mysql-25.0.jar", "geotools/gt-jdbc-oracle-25.0.jar",
    "geotools/gt-jdbc-postgis-25.0.jar", "geotools/gt-main-25.0.jar", "geotools/gt-metadata-25.0.jar", "geotools/gt-opengis-25.0.jar",
    "geotools/gt-process-25.0.jar", "geotools/gt-process-feature-25.0.jar", "geotools/gt-process-geometry-25.0.jar",
    "geotools/gt-referencing-25.0.jar", "geotools/gt-render-25.0.jar", "geotools/gt-shapefile-25.0.jar", "geotools/gt-svg-25.0.jar",
    "geotools/gt-transform-25.0.jar", "geotools/gt-xml-25.0.jar", "geotools/gt-xsd-core-25.0.jar", "geotools/gt-xsd-fes-25.0.jar",
    "geotools/gt-xsd-filter-25.0.jar", "geotools/gt-xsd-gml2-25.0.jar", "geotools/gt-xsd-gml3-25.0.jar", "geotools/gt-xsd-ows-25.0.jar",
    "geotools/gt-xsd-wfs-25.0.jar", "geotools/imageio-ext-arcgrid-1.3.5.jar", "geotools/imageio-ext-cog-commons-1.3.5.jar",
    "geotools/imageio-ext-cog-reader-1.3.5.jar", "geotools/imageio-ext-cog-streams-1.3.5.jar", "geotools/imageio-ext-geocore-1.3.5.jar",
    "geotools/imageio-ext-streams-1.3.5.jar", "geotools/imageio-ext-tiff-1.3.5.jar", "geotools/imageio-ext-utilities-1.3.5.jar",
    "geotools/jai_codec-1.1.3.jar", "geotools/jai_core-1.1.3.jar", "geotools/jai_imageio-1.1.jar", "geotools/jdom2-2.0.6.jar",
    "geotools/jgridshift-core-1.3.jar", "geotools/jsr305-3.0.0.jar", "geotools/jt-affine-1.1.20.jar", "geotools/jt-algebra-1.1.20.jar",
    "geotools/jt-bandcombine-1.1.20.jar", "geotools/jt-bandmerge-1.1.20.jar", "geotools/jt-bandselect-1.1.20.jar",
    "geotools/jt-binarize-1.1.20.jar", "geotools/jt-border-1.1.20.jar", "geotools/jt-buffer-1.1.20.jar",
    "geotools/jt-classbreaks-1.1.20.jar", "geotools/jt-classifier-1.1.20.jar", "geotools/jt-colorconvert-1.1.20.jar",
    "geotools/jt-colorindexer-1.1.20.jar", "geotools/jt-contour-1.6.0.jar", "geotools/jt-crop-1.1.20.jar",
    "geotools/jt-errordiffusion-1.1.20.jar", "geotools/jt-format-1.1.20.jar", "geotools/jt-imagefunction-1.1.20.jar",
    "geotools/jt-iterators-1.1.20.jar", "geotools/jt-jiffle-op-1.1.20.jar", "geotools/jt-lookup-1.1.20.jar", "geotools/jt-mosaic-1.1.20.jar",
    "geotools/jt-nullop-1.1.20.jar", "geotools/jt-orderdither-1.1.20.jar", "geotools/jt-piecewise-1.1.20.jar",
    "geotools/jt-rangelookup-1.6.0.jar", "geotools/jt-rescale-1.1.20.jar", "geotools/jt-rlookup-1.1.20.jar", "geotools/jt-scale-1.1.20.jar",
    "geotools/jt-scale2-1.1.20.jar", "geotools/jt-shadedrelief-1.1.20.jar", "geotools/jt-stats-1.1.20.jar", "geotools/jt-translate-1.1.20.jar",
    "geotools/jt-utilities-1.1.20.jar", "geotools/jt-utils-1.6.0.jar", "geotools/jt-vectorbin-1.1.20.jar", "geotools/jt-vectorbinarize-1.6.0.jar",
    "geotools/jt-vectorize-1.6.0.jar", "geotools/jt-warp-1.1.20.jar", "geotools/jt-zonal-1.1.20.jar", "geotools/jt-zonalstats-1.6.0.jar",
    "geotools/jtds-1.3.1.jar", "geotools/net.opengis.fes-25.0.jar", "geotools/net.opengis.ows-25.0.jar", "geotools/net.opengis.wfs-25.0.jar",
    "geotools/ojdbc8-19.10.0.0.jar", "geotools/org.w3.xlink-25.0.jar", "geotools/picocontainer-1.2.jar", "geotools/xml-commons-resolver-1.2.jar",

    "jfreechart/jfreechart-1.5.3.jar",

    "jts/jts-io-common-1.19.0.jar",

    "moeaframework-2.13.jar",

    "svgsalamander1.1.1/svgSalamander-v1.1.1.jar"
) // all the JAR files exported by the manifest, that are not OGSI bundles


val classPathFiles = """[^\s]+[\w\d\ -_/]+\.jar""".toRegex(setOf(RegexOption.MULTILINE)).findAll(
        file("META-INF/MANIFEST.MF").readText()
).map{ it.value }.filterNot(nonOGSIJars::contains).toMutableList() // all the JAR files exported by the manifest, that are OGSI bundles




publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

platform {
    bundle(fileTree("./") {
        include(classPathFiles)
        exclude(nonOGSIJars)
    })

// with the following block we would group non OGSI jars into a unified bundle



// I cannot finish this block as the syntax is really weird, I tried many things, but I cannot
// get this working in Kotlin with the closure like I want to do below,

// https://github.com/stempler/bnd-platform/tree/910c2c8e5e100d0c31ab4b22a3e7d20b7663fd11#local-dependencies

//    bundle(fileTree("./") {
//        include(nonOGSIJars)
//        exclude(classPathFiles)
//    }, closureOf<BundleDependency> {
//        bnd {
//            "version" to "1.0.0",
//            "symbolicName" to when (it.name){
//                // do some logic here to bind jars from the same group to a symbolic name
//                // eg. geotools jars
//            }
//        }
//    })
}

dependencies {
    // this works in vanilla gradle, but when we will get bndtools to work maybe we will have to ditch this

    // api() will allow to expose the following dependencies to the modules that depend on gama.dependencies
    // https://www.baeldung.com/gradle-dependency-management#2-types-of-configuration

    api(project(":gama.kernel:gama.dev"))
    api(project(":gama.kernel:gama.annotations"))

    api("com.google.inject:guice:7.0.0")
    compileOnlyApi("org.osgi:org.osgi.framework:1.10.0")

    logger.debug("JAR files in gama.dependencies: ")
    classPathFiles.forEach(logger::debug)

    api(files(classPathFiles + nonOGSIJars))
    
}

tasks {
    jar {
        manifest {  
            from ("META-INF/MANIFEST.MF")
        }
    }
}


tasks.named<Jar>("jar") {
    dependsOn(":gama.kernel:gama.annotations:jar")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(configurations.runtimeClasspath.get().filter { it.name.endsWith(".jar") }.map { zipTree(it) })
}